1. 
CREATE OR REPLACE PROCEDURE suma_numeros (
    p_numero1 IN NUMBER,
    p_numero2 IN NUMBER
)
IS
    v_suma NUMBER;
BEGIN
    -- Realizar la suma
    v_suma := p_numero1 + p_numero2;

    -- Visualizar el resultado
    DBMS_OUTPUT.PUT_LINE('La suma de ' || p_numero1 || ' y ' || p_numero2 || ' es: ' || v_suma);
END suma_numeros;
/

-------
DECLARE
    numero1 NUMBER := 5;
    numero2 NUMBER := 7;
BEGIN
    suma_numeros(numero1, numero2);
END;
/

DECLARE
    numero1 NUMBER := 5;
    numero2 NUMBER := 7;
BEGIN
    suma_numeros(numero1, numero2);
END;
/

/////////////////////////////////////////////////////////////////////////
2.
CREATE OR REPLACE PROCEDURE cadena_al_reves (
    p_cadena IN VARCHAR2
)
IS
    v_cadena_al_reves VARCHAR2(4000);
BEGIN
    -- Invertir la cadena
    FOR i IN REVERSE 1..LENGTH(p_cadena)
    LOOP
        v_cadena_al_reves := v_cadena_al_reves || SUBSTR(p_cadena, i, 1);
    END LOOP;

    -- Visualizar el resultado
    DBMS_OUTPUT.PUT_LINE('La cadena al revés es: ' || v_cadena_al_reves);
END cadena_al_reves;
/

DECLARE
    mi_cadena VARCHAR2(100) := 'Hola, Mundo!';
BEGIN
    cadena_al_reves(mi_cadena);
END;
/


---------------------------------------------------------
DECLARE
    mi_cadena VARCHAR2(100) := 'Hola, Mundo!';
BEGIN
    cadena_al_reves(mi_cadena);
END;
/
//////////////////////////////////////////////////////////////////////////

3.
CREATE OR REPLACE FUNCTION suma_numeros (
    p_numero1 IN NUMBER,
    p_numero2 IN NUMBER
) RETURN NUMBER
IS
    v_suma NUMBER;
BEGIN
    
    v_suma := p_numero1 + p_numero2;

    
    RETURN v_suma;
END suma_numeros;
/


CREATE OR REPLACE FUNCTION cadena_al_reves (
    p_cadena IN VARCHAR2
) RETURN VARCHAR2
IS
    v_cadena_al_reves VARCHAR2(4000);
BEGIN
    
    FOR i IN REVERSE 1..LENGTH(p_cadena)
    LOOP
        v_cadena_al_reves := v_cadena_al_reves || SUBSTR(p_cadena, i, 1);
    END LOOP;

    
    RETURN v_cadena_al_reves;
END cadena_al_reves;
/



////////////////////////////////////////////////////////////////////////////////////////////

4.
CREATE OR REPLACE FUNCTION obtener_anio (
    p_fecha IN DATE
) RETURN NUMBER
IS
    v_anio NUMBER;
BEGIN
    -- Extraer el año de la fecha
    v_anio := EXTRACT(YEAR FROM p_fecha);

    -- Retornar el año
    RETURN v_anio;
END obtener_anio;
/

/////////////////////////////////////////////////////////////////////////////////////////////////

5.
DECLARE
    fecha_prueba DATE := TO_DATE('2022-01-23', 'YYYY-MM-DD');
    anio_resultado NUMBER;
BEGIN
    anio_resultado := obtener_anio(fecha_prueba);
    DBMS_OUTPUT.PUT_LINE('El año de la fecha ' || TO_CHAR(fecha_prueba, 'DD-MON-YYYY') || ' es: ' || anio_resultado);
END;
/


///////////////////////////////////////////////////////////////////////////////////////////////////

6.
CREATE OR REPLACE FUNCTION calcular_anios (
    p_fecha_inicio IN DATE,
    p_fecha_fin IN DATE
) RETURN NUMBER
IS
    v_anios NUMBER;
BEGIN
    -- Calcular la diferencia en años
    v_anios := EXTRACT(YEAR FROM p_fecha_fin) - EXTRACT(YEAR FROM p_fecha_inicio);

    -- Ajustar si la fecha de inicio es posterior al día correspondiente en la fecha de fin
    IF TO_NUMBER(TO_CHAR(p_fecha_fin, 'MMDD')) < TO_NUMBER(TO_CHAR(p_fecha_inicio, 'MMDD')) THEN
        v_anios := v_anios - 1;
    END IF;

    -- Retornar el resultado
    RETURN v_anios;
END calcular_anios;
/

DECLARE
    fecha_inicio DATE := TO_DATE('2000-01-01', 'YYYY-MM-DD');
    fecha_fin DATE := TO_DATE('2022-01-23', 'YYYY-MM-DD');
    anios_resultado NUMBER;
BEGIN
    anios_resultado := calcular_anios_completos(fecha_inicio, fecha_fin);
    DBMS_OUTPUT.PUT_LINE('El número de años completos entre ' || TO_CHAR(fecha_inicio, 'DD-MON-YYYY') || ' y ' || TO_CHAR(fecha_fin, 'DD-MON-YYYY') || ' es: ' || anios_resultado);
END;
/


///////////////////////////////////////////////////////////////////////////////////////////////////




7.
CREATE OR REPLACE FUNCTION calcular_trienios (
    p_fecha_inicio IN DATE,
    p_fecha_fin IN DATE
) RETURN NUMBER
IS
    v_anios NUMBER;
    v_trienios NUMBER;
BEGIN
    
    v_anios := calcular_anios(p_fecha_inicio, p_fecha_fin);

    -- Calcular el número de trienios (dividiendo los años completos entre 3)
    v_trienios := TRUNC(v_anios / 3);

    -- Retornar el resultado
    RETURN v_trienios;
END calcular_trienios;
/

DECLARE
    fecha_inicio DATE := TO_DATE('2000-01-01', 'YYYY-MM-DD');
    fecha_fin DATE := TO_DATE('2022-01-23', 'YYYY-MM-DD');
    trienios_resultado NUMBER;
BEGIN
    trienios_resultado := calcular_trienios(fecha_inicio, fecha_fin);
    DBMS_OUTPUT.PUT_LINE('El número de trienios entre ' || TO_CHAR(fecha_inicio, 'DD-MON-YYYY') || ' y ' || TO_CHAR(fecha_fin, 'DD-MON-YYYY') || ' es: ' || trienios_resultado);
END;
/



///////////////////////////////////////////////////////////////////////////////////////////////////////////

8.

CREATE OR REPLACE PROCEDURE suma_lista_numeros (
    p_numero1 IN NUMBER DEFAULT NULL,
    p_numero2 IN NUMBER DEFAULT NULL,
    p_numero3 IN NUMBER DEFAULT NULL,
    p_numero4 IN NUMBER DEFAULT NULL,
    p_numero5 IN NUMBER DEFAULT NULL
)
IS
    v_suma NUMBER := 0;
BEGIN
    -- Sumar los números no nulos
    IF p_numero1 IS NOT NULL THEN
        v_suma := v_suma + p_numero1;
    END IF;
    IF p_numero2 IS NOT NULL THEN
        v_suma := v_suma + p_numero2;
    END IF;
    IF p_numero3 IS NOT NULL THEN
        v_suma := v_suma + p_numero3;
    END IF;
    IF p_numero4 IS NOT NULL THEN
        v_suma := v_suma + p_numero4;
    END IF;
    IF p_numero5 IS NOT NULL THEN
        v_suma := v_suma + p_numero5;
    END IF;

    -- Visualizar el resultado
    DBMS_OUTPUT.PUT_LINE('La suma de los números es: ' || v_suma);
END suma_lista_numeros;
/

DECLARE
    num1 NUMBER := 5;
    num2 NUMBER := 7;
    num3 NUMBER := 10;
BEGIN
    suma_lista_numeros(num1, num2, num3);
END;
/

/////////////////////////////////////////////////////////////////////////////////////////////////////////



10. 
CREATE OR REPLACE PROCEDURE borrar_empleado (
    p_numero_empleado IN NUMBER
)
IS
BEGIN
    
    DELETE FROM empleados
    WHERE numero_empleado = p_numero_empleado;

    DBMS_OUTPUT.PUT_LINE('Empleado con id' || p_numero_empleado || ' eliminado exitosamente.');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No se encontró ningún empleado con el id ' || p_numero_empleado || '.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error al intentar borrar el empleado.');
END borrar_empleado;
/
DECLARE
    numero_empleado_a_borrar NUMBER := 123;
BEGIN
    borrar_empleado(numero_empleado_a_borrar);
END;
/

///////////////////////////////////////////////////////////////////////////////////////////////////////////

11.

CREATE OR REPLACE PROCEDURE modificar_localidad_departamento (
    p_numero_departamento IN NUMBER,
    p_nueva_localidad IN VARCHAR2
)
IS
BEGIN
    -- Modificar la localidad del departamento
    UPDATE departamentos
    SET localidad = p_nueva_localidad
    WHERE numero_departamento = p_numero_departamento;

    DBMS_OUTPUT.PUT_LINE('Localidad del departamento ' || p_numero_departamento || ' modificada exitosamente.');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No se encontró ningún departamento con el número ' || p_numero_departamento || '.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error al intentar modificar la localidad del departamento.');
END modificar_localidad_departamento;
/

DECLARE
    numero_departamento_a_modificar NUMBER := 10;
    nueva_localidad VARCHAR2(100) := 'Nueva Ciudad';
BEGIN
    modificar_localidad_departamento(numero_departamento_a_modificar, nueva_localidad);
END;
/

/////////////////////////////////////////////////////////////////////////////////////////////////////////////

12.







